AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Run cost comparison of AutoScalr to Spot Fleet
Parameters:
  AutoScalrApiKey:
    Type: String
    Description: >
      AutoScalr api_key value from your account
  InstanceTypes:
    Type: String
    Default: m3.medium,m4.large,m4.xlarge,c4.large,c4.xlarge,r4.large,r4.xlarge
    Description: >
      Comman delimited EC2 instance types to use in Spot Fleet and AutoScalr
  TargetVCpuSize:
    Type: Number
    Default: 1
    Description: >
      Target vCPU size to run both Spot Fleet and AutoScalr at for test
  TestDuration:
    Type: Number
    Default: 1
    Description: >
      Hours to run test
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: amKeyPair
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-6869aa05
    us-east-2:
      AMIID: ami-f6035893
    us-west-1:
      AMIID: ami-31490d51
    us-west-2:
      AMIID: ami-7172b611
    eu-west-1:
      AMIID: ami-f9dd458a
    eu-west-2:
      AMIID: ami-886369ec
    eu-central-1:
      AMIID: ami-ea26ce85
    ap-northeast-1:
      AMIID: ami-374db956
    ap-northeast-2:
      AMIID: ami-2b408b45
    ap-southeast-1:
      AMIID: ami-a59b49c6
    ap-southeast-2:
      AMIID: ami-dc361ebf
    ap-south-1:
      AMIID: ami-ffbdd790
    sa-east-1:
      AMIID: ami-6dd04501
    ca-central-1:
      AMIID: ami-730ebd17
Resources:
  AutoScalrFleetBenchmarkBucket:
    Type: AWS::S3::Bucket
  MgrSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security Group for AutoScalr Benchmark Manager
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  EC2MgrInstRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: flbench-ec2-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: [
              'ec2:Describe*',
              'ec2:requestSpot*',
              'ec2:modifySpot*',
              'ec2:cancelSpot*',
              'ec2:AuthorizeSecurityGroupIngress',
              'ec2:CreateTags',
              'ec2:DeleteTags',
              'tag:*',
              'autoscaling:Describe*',
              'autoscaling:CreateAutoScalingGroup',
              'autoscaling:CreateLaunchConfiguration',
              'autoscaling:DeleteLaunchConfiguration',
              'autoscaling:UpdateAutoScalingGroup',
              'autoscaling:DeleteAutoScalingGroup',
              'autoscaling:SuspendProcesses',
              'iam:CreateRole',
              'iam:GetRole',
              'iam:DeleteRole',
              'iam:AttachRolePolicy',
              'iam:ListRolePolicies',
              'iam:GetPolicy',
              'iam:ListEntitiesForPolicy',
              'iam:DetachRolePolicy',
              'iam:ListInstanceProfilesForRole',
              'iam:PassRole',
              's3:ListBuckets',
              ]
            Resource: '*'
          - Effect: Allow
            Action: [
              's3:*',
              ]
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AutoScalrFleetBenchmarkBucket
                - /*
  AsrFBMgrInstProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2MgrInstRole
  AutoScalrFleetBenchmarkMgrInst:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      IamInstanceProfile: !Ref AsrFBMgrInstProfile
      SecurityGroups:
        - !Ref 'MgrSecurityGroup'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              yum -y install git
              rm -f /etc/yum.repos.d/nodesource-el*
              yum clean all && yum update -y
              curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -
              yum clean all && yum update -y
              yum install -y nodejs
              wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz
              tar -C /usr/local -xzf go*.gz
              export PATH=$PATH:/usr/local/go/bin
              wget https://releases.hashicorp.com/terraform/0.10.8/terraform_0.10.8_linux_amd64.zip
              unzip terraform*.zip
              mv terraform /usr/local/bin
              echo export AUTOSCALR_API_KEY=${AutoScalrApiKey} >> /home/ec2-user/testRun.env
              echo export ASR_TEST_DURATION=${TestDuration} >> /home/ec2-user/testRun.env
              echo export ASR_TARG_VCPU=${TargetVCpuSize} >> /home/ec2-user/testRun.env
              echo export ASR_INST_TYPES=${InstanceTypes} >> /home/ec2-user/testRun.env
              echo export ASR_TEST_AMI=${TestAmi} >> /home/ec2-user/testRun.env
              echo export AWS_REGION=${AWS::Region} >> /home/ec2-user/testRun.env
              sudo -u ec2-user bash -c "cd;git clone https://github.com/autoscalr/fleet-cost-benchmark.git"
              sudo -u ec2-user bash -c "~/fleet-cost-benchmark/scripts/runBenchmark.sh > ~/runBenchmark.log 2> ~/runBenchmark.err"
            - {
                TestAmi: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
              }
Outputs:
  S3ResultsBucket:
    Value: !Ref 'AutoScalrFleetBenchmarkBucket'
  FleetBenchmarkMgrInst:
    Value: !Ref 'AutoScalrFleetBenchmarkMgrInst'